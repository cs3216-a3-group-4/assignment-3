// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options, urlSearchParamsBodySerializer } from './client';
import type { SignUpAuthSignupPostData, SignUpAuthSignupPostError, SignUpAuthSignupPostResponse, LogInAuthLoginPostData, LogInAuthLoginPostError, LogInAuthLoginPostResponse, LoginGoogleAuthLoginGoogleGetError, LoginGoogleAuthLoginGoogleGetResponse, AuthGoogleAuthGoogleGetData, AuthGoogleAuthGoogleGetError, AuthGoogleAuthGoogleGetResponse, RequestPasswordResetAuthPasswordResetPostData, RequestPasswordResetAuthPasswordResetPostError, RequestPasswordResetAuthPasswordResetPostResponse, CompletePasswordResetAuthPasswordResetPutData, CompletePasswordResetAuthPasswordResetPutError, CompletePasswordResetAuthPasswordResetPutResponse, StripeWebhookBillingWebhookPostData, StripeWebhookBillingWebhookPostError, StripeWebhookBillingWebhookPostResponse, CompleteEmailVerificationAuthEmailVerificationPutData, CompleteEmailVerificationAuthEmailVerificationPutError, CompleteEmailVerificationAuthEmailVerificationPutResponse, ResendVerificationEmailAuthEmailVerificationPostData, ResendVerificationEmailAuthEmailVerificationPostError, ResendVerificationEmailAuthEmailVerificationPostResponse, GetUserAuthSessionGetData, GetUserAuthSessionGetError, GetUserAuthSessionGetResponse, LogoutAuthLogoutGetData, LogoutAuthLogoutGetError, LogoutAuthLogoutGetResponse, ChangePasswordAuthChangePasswordPutData, ChangePasswordAuthChangePasswordPutError, ChangePasswordAuthChangePasswordPutResponse, CreateCheckoutSessionBillingCreateCheckoutSessionPostData, CreateCheckoutSessionBillingCreateCheckoutSessionPostError, CreateCheckoutSessionBillingCreateCheckoutSessionPostResponse, CreateCustomerPortalSessionBillingCreateCustomerPortalSessionPostData, CreateCustomerPortalSessionBillingCreateCustomerPortalSessionPostError, CreateCustomerPortalSessionBillingCreateCustomerPortalSessionPostResponse, DowngradeSubscriptionBillingDowngradeSubscriptionPutData, DowngradeSubscriptionBillingDowngradeSubscriptionPutError, DowngradeSubscriptionBillingDowngradeSubscriptionPutResponse, GetCategoriesCategoriesGetData, GetCategoriesCategoriesGetError, GetCategoriesCategoriesGetResponse, UpdateProfileProfilePutData, UpdateProfileProfilePutError, UpdateProfileProfilePutResponse, GetEventsEventsGetData, GetEventsEventsGetError, GetEventsEventsGetResponse, GetEventEventsIdGetData, GetEventEventsIdGetError, GetEventEventsIdGetResponse, GetEventNotesEventsIdNotesGetData, GetEventNotesEventsIdNotesGetError, GetEventNotesEventsIdNotesGetResponse, ReadEventEventsIdReadPostData, ReadEventEventsIdReadPostError, ReadEventEventsIdReadPostResponse, SearchWhateverEventsSearchGetData, SearchWhateverEventsSearchGetError, SearchWhateverEventsSearchGetResponse, AddBookmarkEventsIdBookmarksPostData, AddBookmarkEventsIdBookmarksPostError, AddBookmarkEventsIdBookmarksPostResponse, DeleteBookmarkEventsIdBookmarksDeleteData, DeleteBookmarkEventsIdBookmarksDeleteError, DeleteBookmarkEventsIdBookmarksDeleteResponse, GetUserQuestionsUserQuestionsGetData, GetUserQuestionsUserQuestionsGetError, GetUserQuestionsUserQuestionsGetResponse, CreateConceptBasedUserQnUserQuestionsPostData, CreateConceptBasedUserQnUserQuestionsPostError, CreateConceptBasedUserQnUserQuestionsPostResponse, GetUserQuestionUserQuestionsIdGetData, GetUserQuestionUserQuestionsIdGetError, GetUserQuestionUserQuestionsIdGetResponse, ClassifyQuestionUserQuestionsClassifyPostData, ClassifyQuestionUserQuestionsClassifyPostError, ClassifyQuestionUserQuestionsClassifyPostResponse, CreatePointUserQuestionsIdPointsPostData, CreatePointUserQuestionsIdPointsPostError, CreatePointUserQuestionsIdPointsPostResponse, RegenerateExamplesUserQuestionsPointIdExamplesPutData, RegenerateExamplesUserQuestionsPointIdExamplesPutError, RegenerateExamplesUserQuestionsPointIdExamplesPutResponse, GetAllNotesNotesGetData, GetAllNotesNotesGetError, GetAllNotesNotesGetResponse, CreateNoteNotesPostData, CreateNoteNotesPostError, CreateNoteNotesPostResponse, UpdateNoteNotesIdPutData, UpdateNoteNotesIdPutError, UpdateNoteNotesIdPutResponse, DeleteNoteNotesIdDeleteData, DeleteNoteNotesIdDeleteError, DeleteNoteNotesIdDeleteResponse, GetPointNotesPointsIdNotesGetData, GetPointNotesPointsIdNotesGetError, GetPointNotesPointsIdNotesGetResponse, UpsertLikeLikesPostData, UpsertLikeLikesPostError, UpsertLikeLikesPostResponse, CreateEssayEssaysPostData, CreateEssayEssaysPostError, CreateEssayEssaysPostResponse, GetEssaysEssaysGetData, GetEssaysEssaysGetError, GetEssaysEssaysGetResponse, GetEssayEssaysIdGetData, GetEssayEssaysIdGetError, GetEssayEssaysIdGetResponse, DeleteEssayEssaysIdDeleteData, DeleteEssayEssaysIdDeleteError, DeleteEssayEssaysIdDeleteResponse, GetArticlesArticlesGetData, GetArticlesArticlesGetError, GetArticlesArticlesGetResponse, GetTopArticlesArticlesTopGetData, GetTopArticlesArticlesTopGetError, GetTopArticlesArticlesTopGetResponse, GetArticleArticlesIdGetData, GetArticleArticlesIdGetError, GetArticleArticlesIdGetResponse, AddBookmarkArticlesIdBookmarksPostData, AddBookmarkArticlesIdBookmarksPostError, AddBookmarkArticlesIdBookmarksPostResponse, DeleteBookmarkArticlesIdBookmarksDeleteData, DeleteBookmarkArticlesIdBookmarksDeleteError, DeleteBookmarkArticlesIdBookmarksDeleteResponse, ReadArticleArticlesIdReadPostData, ReadArticleArticlesIdReadPostError, ReadArticleArticlesIdReadPostResponse, GetSubscriptionSubscriptionsIdGetData, GetSubscriptionSubscriptionsIdGetError, GetSubscriptionSubscriptionsIdGetResponse, GetSubscriptionStatusSubscriptionsIdStatusGetData, GetSubscriptionStatusSubscriptionsIdStatusGetError, GetSubscriptionStatusSubscriptionsIdStatusGetResponse } from './types.gen';

export const client = createClient(createConfig());

/**
 * Sign Up
 */
export const signUpAuthSignupPost = <ThrowOnError extends boolean = false>(options: Options<SignUpAuthSignupPostData, ThrowOnError>) => { return (options?.client ?? client).post<SignUpAuthSignupPostResponse, SignUpAuthSignupPostError, ThrowOnError>({
    ...options,
    url: '/auth/signup'
}); };

/**
 * Log In
 */
export const logInAuthLoginPost = <ThrowOnError extends boolean = false>(options: Options<LogInAuthLoginPostData, ThrowOnError>) => { return (options?.client ?? client).post<LogInAuthLoginPostResponse, LogInAuthLoginPostError, ThrowOnError>({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
        ...options?.headers
    },
    url: '/auth/login'
}); };

/**
 * Login Google
 */
export const loginGoogleAuthLoginGoogleGet = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<LoginGoogleAuthLoginGoogleGetResponse, LoginGoogleAuthLoginGoogleGetError, ThrowOnError>({
    ...options,
    url: '/auth/login/google'
}); };

/**
 * Auth Google
 */
export const authGoogleAuthGoogleGet = <ThrowOnError extends boolean = false>(options: Options<AuthGoogleAuthGoogleGetData, ThrowOnError>) => { return (options?.client ?? client).get<AuthGoogleAuthGoogleGetResponse, AuthGoogleAuthGoogleGetError, ThrowOnError>({
    ...options,
    url: '/auth/google'
}); };

/**
 * Request Password Reset
 */
export const requestPasswordResetAuthPasswordResetPost = <ThrowOnError extends boolean = false>(options: Options<RequestPasswordResetAuthPasswordResetPostData, ThrowOnError>) => { return (options?.client ?? client).post<RequestPasswordResetAuthPasswordResetPostResponse, RequestPasswordResetAuthPasswordResetPostError, ThrowOnError>({
    ...options,
    url: '/auth/password-reset'
}); };

/**
 * Complete Password Reset
 */
export const completePasswordResetAuthPasswordResetPut = <ThrowOnError extends boolean = false>(options: Options<CompletePasswordResetAuthPasswordResetPutData, ThrowOnError>) => { return (options?.client ?? client).put<CompletePasswordResetAuthPasswordResetPutResponse, CompletePasswordResetAuthPasswordResetPutError, ThrowOnError>({
    ...options,
    url: '/auth/password-reset'
}); };

/**
 * Stripe Webhook
 */
export const stripeWebhookBillingWebhookPost = <ThrowOnError extends boolean = false>(options?: Options<StripeWebhookBillingWebhookPostData, ThrowOnError>) => { return (options?.client ?? client).post<StripeWebhookBillingWebhookPostResponse, StripeWebhookBillingWebhookPostError, ThrowOnError>({
    ...options,
    url: '/billing/webhook'
}); };

/**
 * Complete Email Verification
 */
export const completeEmailVerificationAuthEmailVerificationPut = <ThrowOnError extends boolean = false>(options: Options<CompleteEmailVerificationAuthEmailVerificationPutData, ThrowOnError>) => { return (options?.client ?? client).put<CompleteEmailVerificationAuthEmailVerificationPutResponse, CompleteEmailVerificationAuthEmailVerificationPutError, ThrowOnError>({
    ...options,
    url: '/auth/email-verification'
}); };

/**
 * Resend Verification Email
 */
export const resendVerificationEmailAuthEmailVerificationPost = <ThrowOnError extends boolean = false>(options?: Options<ResendVerificationEmailAuthEmailVerificationPostData, ThrowOnError>) => { return (options?.client ?? client).post<ResendVerificationEmailAuthEmailVerificationPostResponse, ResendVerificationEmailAuthEmailVerificationPostError, ThrowOnError>({
    ...options,
    url: '/auth/email-verification'
}); };

/**
 * Get User
 */
export const getUserAuthSessionGet = <ThrowOnError extends boolean = false>(options?: Options<GetUserAuthSessionGetData, ThrowOnError>) => { return (options?.client ?? client).get<GetUserAuthSessionGetResponse, GetUserAuthSessionGetError, ThrowOnError>({
    ...options,
    url: '/auth/session'
}); };

/**
 * Logout
 */
export const logoutAuthLogoutGet = <ThrowOnError extends boolean = false>(options?: Options<LogoutAuthLogoutGetData, ThrowOnError>) => { return (options?.client ?? client).get<LogoutAuthLogoutGetResponse, LogoutAuthLogoutGetError, ThrowOnError>({
    ...options,
    url: '/auth/logout'
}); };

/**
 * Change Password
 */
export const changePasswordAuthChangePasswordPut = <ThrowOnError extends boolean = false>(options: Options<ChangePasswordAuthChangePasswordPutData, ThrowOnError>) => { return (options?.client ?? client).put<ChangePasswordAuthChangePasswordPutResponse, ChangePasswordAuthChangePasswordPutError, ThrowOnError>({
    ...options,
    url: '/auth/change-password'
}); };

/**
 * Create Checkout Session
 */
export const createCheckoutSessionBillingCreateCheckoutSessionPost = <ThrowOnError extends boolean = false>(options: Options<CreateCheckoutSessionBillingCreateCheckoutSessionPostData, ThrowOnError>) => { return (options?.client ?? client).post<CreateCheckoutSessionBillingCreateCheckoutSessionPostResponse, CreateCheckoutSessionBillingCreateCheckoutSessionPostError, ThrowOnError>({
    ...options,
    url: '/billing/create-checkout-session'
}); };

/**
 * Create Customer Portal Session
 */
export const createCustomerPortalSessionBillingCreateCustomerPortalSessionPost = <ThrowOnError extends boolean = false>(options?: Options<CreateCustomerPortalSessionBillingCreateCustomerPortalSessionPostData, ThrowOnError>) => { return (options?.client ?? client).post<CreateCustomerPortalSessionBillingCreateCustomerPortalSessionPostResponse, CreateCustomerPortalSessionBillingCreateCustomerPortalSessionPostError, ThrowOnError>({
    ...options,
    url: '/billing/create-customer-portal-session'
}); };

/**
 * Downgrade Subscription
 */
export const downgradeSubscriptionBillingDowngradeSubscriptionPut = <ThrowOnError extends boolean = false>(options?: Options<DowngradeSubscriptionBillingDowngradeSubscriptionPutData, ThrowOnError>) => { return (options?.client ?? client).put<DowngradeSubscriptionBillingDowngradeSubscriptionPutResponse, DowngradeSubscriptionBillingDowngradeSubscriptionPutError, ThrowOnError>({
    ...options,
    url: '/billing/downgrade-subscription'
}); };

/**
 * Get Categories
 */
export const getCategoriesCategoriesGet = <ThrowOnError extends boolean = false>(options?: Options<GetCategoriesCategoriesGetData, ThrowOnError>) => { return (options?.client ?? client).get<GetCategoriesCategoriesGetResponse, GetCategoriesCategoriesGetError, ThrowOnError>({
    ...options,
    url: '/categories/'
}); };

/**
 * Update Profile
 */
export const updateProfileProfilePut = <ThrowOnError extends boolean = false>(options: Options<UpdateProfileProfilePutData, ThrowOnError>) => { return (options?.client ?? client).put<UpdateProfileProfilePutResponse, UpdateProfileProfilePutError, ThrowOnError>({
    ...options,
    url: '/profile/'
}); };

/**
 * Get Events
 */
export const getEventsEventsGet = <ThrowOnError extends boolean = false>(options?: Options<GetEventsEventsGetData, ThrowOnError>) => { return (options?.client ?? client).get<GetEventsEventsGetResponse, GetEventsEventsGetError, ThrowOnError>({
    ...options,
    url: '/events/'
}); };

/**
 * Get Event
 */
export const getEventEventsIdGet = <ThrowOnError extends boolean = false>(options: Options<GetEventEventsIdGetData, ThrowOnError>) => { return (options?.client ?? client).get<GetEventEventsIdGetResponse, GetEventEventsIdGetError, ThrowOnError>({
    ...options,
    url: '/events/{id}'
}); };

/**
 * Get Event Notes
 */
export const getEventNotesEventsIdNotesGet = <ThrowOnError extends boolean = false>(options: Options<GetEventNotesEventsIdNotesGetData, ThrowOnError>) => { return (options?.client ?? client).get<GetEventNotesEventsIdNotesGetResponse, GetEventNotesEventsIdNotesGetError, ThrowOnError>({
    ...options,
    url: '/events/{id}/notes'
}); };

/**
 * Read Event
 */
export const readEventEventsIdReadPost = <ThrowOnError extends boolean = false>(options: Options<ReadEventEventsIdReadPostData, ThrowOnError>) => { return (options?.client ?? client).post<ReadEventEventsIdReadPostResponse, ReadEventEventsIdReadPostError, ThrowOnError>({
    ...options,
    url: '/events/{id}/read'
}); };

/**
 * Search Whatever
 */
export const searchWhateverEventsSearchGet = <ThrowOnError extends boolean = false>(options: Options<SearchWhateverEventsSearchGetData, ThrowOnError>) => { return (options?.client ?? client).get<SearchWhateverEventsSearchGetResponse, SearchWhateverEventsSearchGetError, ThrowOnError>({
    ...options,
    url: '/events/search'
}); };

/**
 * Add Bookmark
 */
export const addBookmarkEventsIdBookmarksPost = <ThrowOnError extends boolean = false>(options: Options<AddBookmarkEventsIdBookmarksPostData, ThrowOnError>) => { return (options?.client ?? client).post<AddBookmarkEventsIdBookmarksPostResponse, AddBookmarkEventsIdBookmarksPostError, ThrowOnError>({
    ...options,
    url: '/events/{id}/bookmarks'
}); };

/**
 * Delete Bookmark
 */
export const deleteBookmarkEventsIdBookmarksDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteBookmarkEventsIdBookmarksDeleteData, ThrowOnError>) => { return (options?.client ?? client).delete<DeleteBookmarkEventsIdBookmarksDeleteResponse, DeleteBookmarkEventsIdBookmarksDeleteError, ThrowOnError>({
    ...options,
    url: '/events/{id}/bookmarks'
}); };

/**
 * Get User Questions
 */
export const getUserQuestionsUserQuestionsGet = <ThrowOnError extends boolean = false>(options?: Options<GetUserQuestionsUserQuestionsGetData, ThrowOnError>) => { return (options?.client ?? client).get<GetUserQuestionsUserQuestionsGetResponse, GetUserQuestionsUserQuestionsGetError, ThrowOnError>({
    ...options,
    url: '/user-questions/'
}); };

/**
 * Create Concept Based User Qn
 */
export const createConceptBasedUserQnUserQuestionsPost = <ThrowOnError extends boolean = false>(options: Options<CreateConceptBasedUserQnUserQuestionsPostData, ThrowOnError>) => { return (options?.client ?? client).post<CreateConceptBasedUserQnUserQuestionsPostResponse, CreateConceptBasedUserQnUserQuestionsPostError, ThrowOnError>({
    ...options,
    url: '/user-questions/'
}); };

/**
 * Get User Question
 */
export const getUserQuestionUserQuestionsIdGet = <ThrowOnError extends boolean = false>(options: Options<GetUserQuestionUserQuestionsIdGetData, ThrowOnError>) => { return (options?.client ?? client).get<GetUserQuestionUserQuestionsIdGetResponse, GetUserQuestionUserQuestionsIdGetError, ThrowOnError>({
    ...options,
    url: '/user-questions/{id}'
}); };

/**
 * Classify Question
 */
export const classifyQuestionUserQuestionsClassifyPost = <ThrowOnError extends boolean = false>(options: Options<ClassifyQuestionUserQuestionsClassifyPostData, ThrowOnError>) => { return (options?.client ?? client).post<ClassifyQuestionUserQuestionsClassifyPostResponse, ClassifyQuestionUserQuestionsClassifyPostError, ThrowOnError>({
    ...options,
    url: '/user-questions/classify'
}); };

/**
 * Create Point
 */
export const createPointUserQuestionsIdPointsPost = <ThrowOnError extends boolean = false>(options: Options<CreatePointUserQuestionsIdPointsPostData, ThrowOnError>) => { return (options?.client ?? client).post<CreatePointUserQuestionsIdPointsPostResponse, CreatePointUserQuestionsIdPointsPostError, ThrowOnError>({
    ...options,
    url: '/user-questions/{id}/points'
}); };

/**
 * Regenerate Examples
 */
export const regenerateExamplesUserQuestionsPointIdExamplesPut = <ThrowOnError extends boolean = false>(options: Options<RegenerateExamplesUserQuestionsPointIdExamplesPutData, ThrowOnError>) => { return (options?.client ?? client).put<RegenerateExamplesUserQuestionsPointIdExamplesPutResponse, RegenerateExamplesUserQuestionsPointIdExamplesPutError, ThrowOnError>({
    ...options,
    url: '/user-questions/{point_id}/examples'
}); };

/**
 * Get All Notes
 */
export const getAllNotesNotesGet = <ThrowOnError extends boolean = false>(options?: Options<GetAllNotesNotesGetData, ThrowOnError>) => { return (options?.client ?? client).get<GetAllNotesNotesGetResponse, GetAllNotesNotesGetError, ThrowOnError>({
    ...options,
    url: '/notes/'
}); };

/**
 * Create Note
 */
export const createNoteNotesPost = <ThrowOnError extends boolean = false>(options: Options<CreateNoteNotesPostData, ThrowOnError>) => { return (options?.client ?? client).post<CreateNoteNotesPostResponse, CreateNoteNotesPostError, ThrowOnError>({
    ...options,
    url: '/notes/'
}); };

/**
 * Update Note
 */
export const updateNoteNotesIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateNoteNotesIdPutData, ThrowOnError>) => { return (options?.client ?? client).put<UpdateNoteNotesIdPutResponse, UpdateNoteNotesIdPutError, ThrowOnError>({
    ...options,
    url: '/notes/{id}'
}); };

/**
 * Delete Note
 */
export const deleteNoteNotesIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteNoteNotesIdDeleteData, ThrowOnError>) => { return (options?.client ?? client).delete<DeleteNoteNotesIdDeleteResponse, DeleteNoteNotesIdDeleteError, ThrowOnError>({
    ...options,
    url: '/notes/{id}'
}); };

/**
 * Get Point Notes
 */
export const getPointNotesPointsIdNotesGet = <ThrowOnError extends boolean = false>(options?: Options<GetPointNotesPointsIdNotesGetData, ThrowOnError>) => { return (options?.client ?? client).get<GetPointNotesPointsIdNotesGetResponse, GetPointNotesPointsIdNotesGetError, ThrowOnError>({
    ...options,
    url: '/points/{id}/notes'
}); };

/**
 * Upsert Like
 */
export const upsertLikeLikesPost = <ThrowOnError extends boolean = false>(options: Options<UpsertLikeLikesPostData, ThrowOnError>) => { return (options?.client ?? client).post<UpsertLikeLikesPostResponse, UpsertLikeLikesPostError, ThrowOnError>({
    ...options,
    url: '/likes/'
}); };

/**
 * Create Essay
 */
export const createEssayEssaysPost = <ThrowOnError extends boolean = false>(options: Options<CreateEssayEssaysPostData, ThrowOnError>) => { return (options?.client ?? client).post<CreateEssayEssaysPostResponse, CreateEssayEssaysPostError, ThrowOnError>({
    ...options,
    url: '/essays/'
}); };

/**
 * Get Essays
 */
export const getEssaysEssaysGet = <ThrowOnError extends boolean = false>(options?: Options<GetEssaysEssaysGetData, ThrowOnError>) => { return (options?.client ?? client).get<GetEssaysEssaysGetResponse, GetEssaysEssaysGetError, ThrowOnError>({
    ...options,
    url: '/essays/'
}); };

/**
 * Get Essay
 */
export const getEssayEssaysIdGet = <ThrowOnError extends boolean = false>(options: Options<GetEssayEssaysIdGetData, ThrowOnError>) => { return (options?.client ?? client).get<GetEssayEssaysIdGetResponse, GetEssayEssaysIdGetError, ThrowOnError>({
    ...options,
    url: '/essays/{id}'
}); };

/**
 * Delete Essay
 */
export const deleteEssayEssaysIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteEssayEssaysIdDeleteData, ThrowOnError>) => { return (options?.client ?? client).delete<DeleteEssayEssaysIdDeleteResponse, DeleteEssayEssaysIdDeleteError, ThrowOnError>({
    ...options,
    url: '/essays/{id}'
}); };

/**
 * Get Articles
 */
export const getArticlesArticlesGet = <ThrowOnError extends boolean = false>(options?: Options<GetArticlesArticlesGetData, ThrowOnError>) => { return (options?.client ?? client).get<GetArticlesArticlesGetResponse, GetArticlesArticlesGetError, ThrowOnError>({
    ...options,
    url: '/articles/'
}); };

/**
 * Get Top Articles
 * Get events of the most recent top_article_group
 */
export const getTopArticlesArticlesTopGet = <ThrowOnError extends boolean = false>(options: Options<GetTopArticlesArticlesTopGetData, ThrowOnError>) => { return (options?.client ?? client).get<GetTopArticlesArticlesTopGetResponse, GetTopArticlesArticlesTopGetError, ThrowOnError>({
    ...options,
    url: '/articles/top'
}); };

/**
 * Get Article
 */
export const getArticleArticlesIdGet = <ThrowOnError extends boolean = false>(options: Options<GetArticleArticlesIdGetData, ThrowOnError>) => { return (options?.client ?? client).get<GetArticleArticlesIdGetResponse, GetArticleArticlesIdGetError, ThrowOnError>({
    ...options,
    url: '/articles/{id}'
}); };

/**
 * Add Bookmark
 */
export const addBookmarkArticlesIdBookmarksPost = <ThrowOnError extends boolean = false>(options: Options<AddBookmarkArticlesIdBookmarksPostData, ThrowOnError>) => { return (options?.client ?? client).post<AddBookmarkArticlesIdBookmarksPostResponse, AddBookmarkArticlesIdBookmarksPostError, ThrowOnError>({
    ...options,
    url: '/articles/{id}/bookmarks'
}); };

/**
 * Delete Bookmark
 */
export const deleteBookmarkArticlesIdBookmarksDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteBookmarkArticlesIdBookmarksDeleteData, ThrowOnError>) => { return (options?.client ?? client).delete<DeleteBookmarkArticlesIdBookmarksDeleteResponse, DeleteBookmarkArticlesIdBookmarksDeleteError, ThrowOnError>({
    ...options,
    url: '/articles/{id}/bookmarks'
}); };

/**
 * Read Article
 */
export const readArticleArticlesIdReadPost = <ThrowOnError extends boolean = false>(options: Options<ReadArticleArticlesIdReadPostData, ThrowOnError>) => { return (options?.client ?? client).post<ReadArticleArticlesIdReadPostResponse, ReadArticleArticlesIdReadPostError, ThrowOnError>({
    ...options,
    url: '/articles/{id}/read'
}); };

/**
 * Get Subscription
 */
export const getSubscriptionSubscriptionsIdGet = <ThrowOnError extends boolean = false>(options: Options<GetSubscriptionSubscriptionsIdGetData, ThrowOnError>) => { return (options?.client ?? client).get<GetSubscriptionSubscriptionsIdGetResponse, GetSubscriptionSubscriptionsIdGetError, ThrowOnError>({
    ...options,
    url: '/subscriptions/{id}'
}); };

/**
 * Get Subscription Status
 */
export const getSubscriptionStatusSubscriptionsIdStatusGet = <ThrowOnError extends boolean = false>(options: Options<GetSubscriptionStatusSubscriptionsIdStatusGetData, ThrowOnError>) => { return (options?.client ?? client).get<GetSubscriptionStatusSubscriptionsIdStatusGetResponse, GetSubscriptionStatusSubscriptionsIdStatusGetError, ThrowOnError>({
    ...options,
    url: '/subscriptions/{id}/status'
}); };