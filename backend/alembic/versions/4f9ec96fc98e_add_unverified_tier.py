"""Add unverified tier

Revision ID: 4f9ec96fc98e
Revises: 651ed2d244c5
Create Date: 2024-10-31 14:30:56.099043

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlalchemy.orm as orm
from alembic_postgresql_enum import TableReference
from src.common.base import Base
from src.limits.models import TierNames

# revision identifiers, used by Alembic.
revision: str = "4f9ec96fc98e"
down_revision: Union[str, None] = "651ed2d244c5"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


class Tier(Base):
    __tablename__ = "tier"

    id: orm.Mapped[int] = orm.mapped_column(primary_key=True)
    tier_name: orm.Mapped[TierNames]
    label: orm.Mapped[str]
    gp_question_limit: orm.Mapped[int]


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.sync_enum_values(
        "public",
        "tiernames",
        ["FREE", "ADMIN", "PREMIUM", "UNVERIFIED"],
        [
            TableReference(
                table_schema="public", table_name="tier", column_name="tier_name"
            )
        ],
        enum_values_to_rename=[],
    )
    session = orm.Session(bind=op.get_bind())
    session.add(Tier(tier_name="UNVERIFIED", label="Unverified", gp_question_limit=0))
    session.commit()
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    session = orm.Session(bind=op.get_bind())
    unverified = session.scalar(sa.select(Tier).where(Tier.label == "Unverified"))
    session.delete(unverified)
    session.commit()

    op.sync_enum_values(
        "public",
        "tiernames",
        ["FREE", "ADMIN", "PREMIUM"],
        [
            TableReference(
                table_schema="public", table_name="tier", column_name="tier_name"
            )
        ],
        enum_values_to_rename=[],
    )

    # ### end Alembic commands ###
